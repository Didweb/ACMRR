security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        App\Entity\User:
            algorithm: auto

    #    Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthenticator
            logout:
                path: app_logout
                target: /
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 604800 
                path: /
                always_remember_me: false
            # pattern: ^/
            # provider: app_user_provider
            # custom_authenticator: App\Security\AppCustomAuthenticator
            # form_login:
            #     login_path: app_login       
            #     check_path: app_login       
            #     enable_csrf: true
            #     csrf_token_id: authenticate
            # logout:
            #     path: app_logout
            #     target: /
            # remember_me:
            #     secret: '%kernel.secret%'
            #     lifetime: 604800

        # login:
        #     pattern: ^/api/login
        #     stateless: true
        #     json_login:
        #         check_path: /api/login
        #         username_path: email
        #         password_path: password
        #         success_handler: lexik_jwt_authentication.handler.authentication_success
        #         failure_handler: lexik_jwt_authentication.handler.authentication_failure

        # api:
        #     pattern: ^/api
        #     stateless: true
        #     jwt: ~
    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Login API p√∫blico
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: ROLE_SUPER_ADMIN }

        - { path: ^/admin, roles: ROLE_SUPER_ADMIN }
        - { path: ^/dashboard, roles: ROLE_COLLABORATOR }
        - { path: ^/, roles: PUBLIC_ACCESS }

    role_hierarchy:
        ROLE_SUPER_ADMIN: [ROLE_COLLABORATOR]
when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
